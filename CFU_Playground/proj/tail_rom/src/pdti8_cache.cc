
// Generated cache data include file

#include "calc_once_data.h"

namespace {
uint32_t model_hash = 0x42d22919;

const uint32_t buffer_0[8] = {
  0x595756e6, 0x48aa2030, 0x425eeed7, 0x474548da,
  0x7e01c5a9, 0x66140e44, 0x6311d242, 0x5eea603f,
};
constexpr size_t size_0 = 8;

const uint32_t buffer_1[8] = {
  0xfffffff9, 0xfffffffa, 0xfffffff7, 0xfffffff7,
  0xfffffff8, 0xfffffffa, 0xfffffff9, 0xfffffff5,
};
constexpr size_t size_1 = 8;

const uint32_t buffer_2[8] = {
  0x4629e300, 0x654be500, 0x4ac11a80, 0x5f25e680,
  0x7818b680, 0x56cc3880, 0x78d0c880, 0x51d42100,
};
constexpr size_t size_2 = 8;

const uint32_t buffer_3[8] = {
  0xfffffff9, 0xfffffff9, 0xfffffffe, 0xfffffff8,
  0xfffffffa, 0xfffffff8, 0xfffffff9, 0xffffffff,
};
constexpr size_t size_3 = 8;

const uint32_t buffer_4[16] = {
  0x71448480, 0x48692680, 0x43b26300, 0x7721e080,
  0x63908500, 0x64d12080, 0x40262f00, 0x46359100,
  0x7503d980, 0x43da1400, 0x6963d980, 0x41b19380,
  0x63564380, 0x71ea7200, 0x4278a980, 0x595b2c00,
};
constexpr size_t size_4 = 16;

const uint32_t buffer_5[16] = {
  0xfffffffa, 0xfffffffa, 0xfffffffb, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffffa, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffff9, 0xfffffffa, 0xfffffffa,
};
constexpr size_t size_5 = 16;

const uint32_t buffer_6[16] = {
  0x72d77980, 0x6369bb00, 0x50c0a380, 0x4191d080,
  0x5fb89700, 0x4ea65f80, 0x52e08000, 0x57c11b00,
  0x5257cd00, 0x48ea1d00, 0x621d1100, 0x51335a80,
  0x7637f780, 0x72e31400, 0x6d11d880, 0x76904280,
};
constexpr size_t size_6 = 16;

const uint32_t buffer_7[16] = {
  0xfffffff8, 0xfffffff8, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff8,
  0xfffffff9, 0xfffffffa, 0xfffffff8, 0xfffffff9,
  0xfffffff8, 0xfffffff8, 0xfffffff9, 0xfffffff9,
};
constexpr size_t size_7 = 16;

const uint32_t buffer_8[32] = {
  0x5e63ae00, 0x41c63300, 0x66916a00, 0x68b72400,
  0x51846e00, 0x68883080, 0x5785bc80, 0x70bf1d00,
  0x7b361800, 0x6f4cfd80, 0x72e27800, 0x54620e00,
  0x681d5880, 0x5388c400, 0x507a7600, 0x5dea7180,
  0x6cf6d580, 0x7d6dca80, 0x48853300, 0x670b4d80,
  0x585b1200, 0x7ee3d280, 0x60ba5600, 0x6e295e00,
  0x585a8500, 0x49162480, 0x5a46b000, 0x77bf3f80,
  0x4dc1cd00, 0x4d282500, 0x4426ea00, 0x78bcc000,
};
constexpr size_t size_8 = 32;

const uint32_t buffer_9[32] = {
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff7, 0xfffffff9, 0xfffffff9,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffff8, 0xfffffff8,
  0xfffffff9, 0xfffffff7, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff7, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffffa, 0xfffffff8,
};
constexpr size_t size_9 = 32;

const uint32_t buffer_10[32] = {
  0x4244c380, 0x4ee83c80, 0x72d1b400, 0x51135c80,
  0x68654c00, 0x62e21800, 0x47c21380, 0x75851680,
  0x777b5f00, 0x45867800, 0x58eae200, 0x6e226580,
  0x5a151180, 0x6b91e600, 0x453aca80, 0x436eee00,
  0x72b18a80, 0x45d21d80, 0x59a38080, 0x64040b80,
  0x5a42ef00, 0x600ea380, 0x67f92f00, 0x6a1a0600,
  0x63a2e480, 0x78431500, 0x7c3e2300, 0x692b2b80,
  0x537a0200, 0x7046f600, 0x69cfa200, 0x5c0ca680,
};
constexpr size_t size_10 = 32;

const uint32_t buffer_11[32] = {
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffffa,
  0xfffffffa, 0xfffffffb, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffffb, 0xfffffffb, 0xfffffff9,
  0xfffffff8, 0xfffffffa, 0xfffffffa, 0xfffffff8,
  0xfffffff9, 0xfffffff9, 0xfffffffb, 0xfffffffb,
  0xfffffff9, 0xfffffffb, 0xfffffff8, 0xfffffff9,
  0xfffffff9, 0xfffffffb, 0xfffffff9, 0xfffffff8,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffffa,
};
constexpr size_t size_11 = 32;

const uint32_t buffer_12[32] = {
  0x46e88f80, 0x63622500, 0x51614f00, 0x4193a800,
  0x44da4780, 0x5dcf5200, 0x79f04680, 0x6f872a00,
  0x50ebd400, 0x7abd3f80, 0x5e748700, 0x70037d00,
  0x55a58900, 0x57dc4a80, 0x6a611b80, 0x7d95df00,
  0x41e4ee80, 0x4d805900, 0x5f033600, 0x4ee92380,
  0x6e5f1380, 0x42387100, 0x7768e380, 0x54162780,
  0x69017a00, 0x42614e00, 0x6bc68580, 0x58328b00,
  0x5d615780, 0x7e5deb00, 0x4c460b00, 0x7f68dd80,
};
constexpr size_t size_12 = 32;

const uint32_t buffer_13[32] = {
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff9, 0xfffffff8, 0xfffffff9, 0xfffffff8,
  0xfffffff9, 0xfffffff9, 0xfffffff8, 0xfffffff8,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff8, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff8, 0xfffffff8, 0xfffffff9, 0xfffffff8,
};
constexpr size_t size_13 = 32;

const uint32_t buffer_14[32] = {
  0x5d740700, 0x706d8300, 0x56558a80, 0x74a6e100,
  0x41f17680, 0x439c7b80, 0x63652180, 0x642f3a80,
  0x63d40d80, 0x4d138d00, 0x72557d00, 0x634aeb80,
  0x46ba1480, 0x6f9d2b00, 0x49effe00, 0x6cec1500,
  0x66961d00, 0x5f510300, 0x5072ab00, 0x68a13e00,
  0x4f961b00, 0x47ea3780, 0x43bb8080, 0x72fd2d00,
  0x71603080, 0x7c753e80, 0x6bcc1e80, 0x603e8980,
  0x4dee3000, 0x6f284900, 0x48630480, 0x6ba97000,
};
constexpr size_t size_14 = 32;

const uint32_t buffer_15[32] = {
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffffa, 0xfffffff9, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff9, 0xfffffff8,
  0xfffffff9, 0xfffffff9, 0xfffffff8, 0xfffffff8,
  0xfffffff9, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff9, 0xfffffff8, 0xfffffff9, 0xfffffff9,
};
constexpr size_t size_15 = 32;

const uint32_t buffer_16[64] = {
  0x454e4f00, 0x57fdd080, 0x52848400, 0x455afc80,
  0x6af11b80, 0x79122b80, 0x4ff78480, 0x41f15480,
  0x5a844a80, 0x46460a80, 0x4aa1db80, 0x4ff95180,
  0x59f9f680, 0x45014500, 0x56fae600, 0x41991880,
  0x43bc2e00, 0x415bcb80, 0x465dd700, 0x5e1c0d00,
  0x7364fb00, 0x6a0ad080, 0x6e3c4000, 0x61987600,
  0x5d40ac00, 0x7139ba00, 0x570dae00, 0x6b9ca900,
  0x59dccb00, 0x41923880, 0x45119000, 0x617ba400,
  0x552f2680, 0x510a1900, 0x773f3500, 0x6f8e1700,
  0x4f212a00, 0x52082300, 0x77d68500, 0x5ab51100,
  0x6fcde200, 0x46ea7e80, 0x69f6bf00, 0x476d8480,
  0x6756de80, 0x68507900, 0x4329f500, 0x78a8e400,
  0x56a8bb00, 0x46409080, 0x42461d00, 0x47df5400,
  0x46e1a780, 0x448e4f00, 0x56498b80, 0x4c483380,
  0x6a32be80, 0x6a86bd80, 0x490e2100, 0x5320f600,
  0x6107a500, 0x7eb4ae00, 0x5dcee900, 0x645d8500,
};
constexpr size_t size_16 = 64;

const uint32_t buffer_17[64] = {
  0xfffffff9, 0xfffffff8, 0xfffffff9, 0xfffffff9,
  0xfffffff8, 0xfffffff8, 0xfffffff9, 0xfffffff9,
  0xfffffff8, 0xfffffff9, 0xfffffff8, 0xfffffff9,
  0xfffffff8, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff8,
  0xfffffff9, 0xfffffff8, 0xfffffff8, 0xfffffff9,
  0xfffffff9, 0xfffffff7, 0xfffffff8, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff8, 0xfffffff8, 0xfffffff9,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff9, 0xfffffff8, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff8, 0xfffffff8,
  0xfffffff9, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff8, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff8, 0xfffffff9, 0xfffffff9, 0xfffffff8,
};
constexpr size_t size_17 = 64;

const uint32_t buffer_18[64] = {
  0x53b6d780, 0x4d7db780, 0x7832a780, 0x7b2e3200,
  0x4c77e880, 0x47d88580, 0x58cbe800, 0x6476a480,
  0x682ae280, 0x767fff80, 0x46b08480, 0x4be5e980,
  0x4a4a2880, 0x7e6b5c80, 0x6affea80, 0x40103480,
  0x5f1c4580, 0x4d74d300, 0x6bf54d00, 0x4eaf6800,
  0x4a827d00, 0x6070bb00, 0x45b76080, 0x659a7800,
  0x58b06500, 0x7252bc80, 0x5c429d80, 0x4ac57100,
  0x605df600, 0x74d1fd80, 0x589e8a00, 0x74448e80,
  0x45bd0300, 0x5b191780, 0x6b976600, 0x74639900,
  0x59916b80, 0x61200f00, 0x5b5a3700, 0x583b9400,
  0x76d52480, 0x713c2780, 0x51f4c280, 0x6cf4af00,
  0x7d55b680, 0x6f949080, 0x5f285b80, 0x4261fb80,
  0x559c0c00, 0x49088080, 0x79f43c00, 0x46cb3e80,
  0x6b335b00, 0x59b0bc80, 0x4906f500, 0x54f1d980,
  0x4662f000, 0x641c6700, 0x4d9c5c00, 0x509a9180,
  0x650c2f00, 0x452a3180, 0x5bf48b80, 0x5eb27d00,
};
constexpr size_t size_18 = 64;

const uint32_t buffer_19[64] = {
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff8,
  0xfffffffa, 0xfffffffa, 0xfffffffb, 0xfffffffa,
  0xfffffffa, 0xfffffff8, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffb, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff8,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff8, 0xfffffff8, 0xfffffffa, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffffa,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffffa,
};
constexpr size_t size_19 = 64;

const uint32_t buffer_20[64] = {
  0x55e45200, 0x7d352700, 0x46ae2580, 0x52430d00,
  0x71004e80, 0x5ca30b80, 0x75656200, 0x6cc89c80,
  0x46ef9c00, 0x4099b580, 0x7f433f00, 0x70a8de00,
  0x40751c80, 0x4f9e2180, 0x545ba700, 0x47a8b200,
  0x409ffc00, 0x483df280, 0x542da680, 0x4bf3c700,
  0x77f7da00, 0x6aeb6100, 0x752b4480, 0x78632200,
  0x56055a00, 0x4e616300, 0x4dd9a580, 0x70cc4600,
  0x481bcc00, 0x6dd52880, 0x40bf1900, 0x6e9f4800,
  0x60c41a00, 0x6cb5bc00, 0x66587580, 0x5e3c1e00,
  0x6c3be580, 0x4b463b80, 0x5656dd80, 0x45c66180,
  0x41599300, 0x75206b00, 0x5c70c700, 0x776abf00,
  0x7a700800, 0x702c6280, 0x5dd57a80, 0x4e6f5e80,
  0x62e67400, 0x7d8a5f80, 0x73f01b80, 0x46f1e200,
  0x655f7b80, 0x470d6d80, 0x75525c00, 0x6cd2a580,
  0x67fac800, 0x756ede00, 0x73134e80, 0x6f069400,
  0x7f512c00, 0x41c04300, 0x4a250180, 0x496d7a00,
};
constexpr size_t size_20 = 64;

const uint32_t buffer_21[64] = {
  0xfffffff8, 0xfffffff8, 0xfffffff9, 0xfffffff9,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff9, 0xfffffff9, 0xfffffff8, 0xfffffff8,
  0xfffffff9, 0xfffffff8, 0xfffffff9, 0xfffffff8,
  0xfffffff9, 0xfffffff8, 0xfffffff8, 0xfffffff9,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff9, 0xfffffff8,
  0xfffffff9, 0xfffffff8, 0xfffffff9, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff9,
  0xfffffff9, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff7, 0xfffffff8, 0xfffffff9,
  0xfffffff7, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff9, 0xfffffff8, 0xfffffff8,
};
constexpr size_t size_21 = 64;

const uint32_t buffer_22[64] = {
  0x48580080, 0x443af380, 0x727b6d00, 0x7c51f980,
  0x5e605700, 0x60f9cc00, 0x50f13a80, 0x7d7f2480,
  0x7bcab880, 0x58e81300, 0x7b7cc980, 0x43a29480,
  0x4482cd00, 0x7ff99600, 0x7deacd80, 0x7994e900,
  0x763f7880, 0x4e78cc80, 0x79a9c300, 0x47941c00,
  0x72105f00, 0x414b5a80, 0x5b854200, 0x6dd25280,
  0x4ecb0d80, 0x77cc8900, 0x4a66d000, 0x7f963100,
  0x7f364800, 0x4ae36e00, 0x714be680, 0x407c4500,
  0x7248a980, 0x785cfc80, 0x7b9cc980, 0x56397200,
  0x4aa91480, 0x4c7b8080, 0x65673d00, 0x68295c80,
  0x78cfb700, 0x54250180, 0x51ee1a00, 0x49d6e980,
  0x71a2f100, 0x49a55300, 0x6a359d00, 0x4bcfec80,
  0x7ba9f780, 0x45814380, 0x59ea4580, 0x4c9b0d80,
  0x668cc800, 0x60aeed00, 0x74772e80, 0x41adbe80,
  0x6cbb1800, 0x4191db00, 0x62eeab80, 0x63ee7e00,
  0x5e9fc800, 0x471d1000, 0x44019a80, 0x6cf97080,
};
constexpr size_t size_22 = 64;

const uint32_t buffer_23[64] = {
  0xfffffff9, 0xfffffff9, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff9, 0xfffffff8,
  0xfffffff8, 0xfffffff9, 0xfffffff8, 0xfffffff9,
  0xfffffff9, 0xfffffff8, 0xfffffff8, 0xfffffff9,
  0xfffffff8, 0xfffffffa, 0xfffffff8, 0xfffffff9,
  0xfffffff8, 0xfffffff9, 0xfffffff9, 0xfffffff8,
  0xfffffff9, 0xfffffff8, 0xfffffff9, 0xfffffff8,
  0xfffffff8, 0xfffffff9, 0xfffffff8, 0xfffffff9,
  0xfffffff8, 0xfffffff8, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff8, 0xfffffff9, 0xfffffff8, 0xfffffff9,
  0xfffffff8, 0xfffffff9, 0xfffffff8, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff8, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff9, 0xfffffff9, 0xfffffff9,
};
constexpr size_t size_23 = 64;

const uint32_t buffer_24[128] = {
  0x7b8b6d80, 0x6632c080, 0x5e187000, 0x7ecd1a00,
  0x65ad5680, 0x4ed7b200, 0x4ee5b000, 0x69794e80,
  0x48b3f780, 0x6f609600, 0x65c74680, 0x46bd1f00,
  0x593f3200, 0x7ac69a80, 0x54441c80, 0x5c843480,
  0x5ad2db80, 0x63140700, 0x7c88bb80, 0x54905f80,
  0x7394e800, 0x591e7f80, 0x41af8600, 0x43c10000,
  0x47b68e00, 0x5eee5100, 0x6c696a80, 0x7806d000,
  0x67848980, 0x4322bf00, 0x72df4380, 0x6220d180,
  0x77214280, 0x5cc1ee80, 0x5957b800, 0x5713c980,
  0x67bcc800, 0x78aa8d80, 0x6ebac400, 0x7e38c100,
  0x419cf100, 0x6edd2400, 0x6300c980, 0x7178db00,
  0x42662300, 0x42df1400, 0x6d067b00, 0x6fdd9480,
  0x4b9c5500, 0x50759b80, 0x40774a00, 0x7574c400,
  0x6e4fb100, 0x710f2d80, 0x63541e80, 0x64c64f00,
  0x794c0500, 0x6daa3900, 0x579bfe00, 0x42842b00,
  0x62697d80, 0x5c092780, 0x57317c00, 0x6433dd00,
  0x70de0100, 0x6e80fb80, 0x526f4000, 0x4df90780,
  0x625c9980, 0x60e27200, 0x650f2f00, 0x49821000,
  0x6d1d1b80, 0x691aae00, 0x65798680, 0x437aab80,
  0x52efcf80, 0x5acc4600, 0x59cc6a80, 0x58414600,
  0x703d5500, 0x68b59d00, 0x7e6f9200, 0x65717400,
  0x61a36500, 0x68103f80, 0x4b91b580, 0x64e5c480,
  0x6034c280, 0x5138b800, 0x79b92080, 0x54f92180,
  0x6ed2da00, 0x50fdb780, 0x44409b80, 0x52609c00,
  0x4ea37600, 0x7d82ea80, 0x64d6fd00, 0x6e001c00,
  0x41512100, 0x43bfe500, 0x6f7c7c00, 0x7950d480,
  0x73b0ee80, 0x50716100, 0x5a831e80, 0x6437b500,
  0x65942480, 0x6db88980, 0x781cab80, 0x44361f80,
  0x60e3cc80, 0x62a43200, 0x5a9a0100, 0x6892c780,
  0x6d7f6200, 0x4f52c700, 0x5d62db00, 0x7dd69980,
  0x61e71580, 0x4ed27a00, 0x67695f80, 0x49357580,
  0x44f20b80, 0x54445400, 0x6a8e0200, 0x6363cc00,
};
constexpr size_t size_24 = 128;

const uint32_t buffer_25[128] = {
  0xfffffff8, 0xfffffff8, 0xfffffff9, 0xfffffff8,
  0xfffffff8, 0xfffffff9, 0xfffffff8, 0xfffffff8,
  0xfffffff9, 0xfffffff8, 0xfffffff8, 0xfffffff9,
  0xfffffff8, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff9, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff9, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff9, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff9, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff9,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff9, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff9, 0xfffffff9, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff7,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff9,
  0xfffffff9, 0xfffffff8, 0xfffffff8, 0xfffffff8,
};
constexpr size_t size_25 = 128;

const uint32_t buffer_26[128] = {
  0x4c0d3180, 0x6fe57800, 0x6e1b3500, 0x4b45bd00,
  0x7a676b00, 0x7a4cf780, 0x5a0f6680, 0x4b689480,
  0x5f5eaa80, 0x5cf9d180, 0x4558a180, 0x449acf00,
  0x58e96480, 0x4576cc80, 0x61439900, 0x7720a800,
  0x4b481000, 0x4b8db280, 0x7b645280, 0x67343200,
  0x5538ed00, 0x45ec0000, 0x512c1f00, 0x5b184d80,
  0x414d3e00, 0x6b292900, 0x61f4ff00, 0x432b2f80,
  0x6a527780, 0x4fcacb80, 0x4da36100, 0x63226600,
  0x57e0d380, 0x78038100, 0x72e7e080, 0x4a0e3880,
  0x59ffbe80, 0x79db5200, 0x6d40fa00, 0x5dd3d580,
  0x64ec7780, 0x4118d080, 0x60fdb880, 0x616b4880,
  0x67c5b380, 0x4785e400, 0x6d975f80, 0x4f73b800,
  0x52a38400, 0x75f36a00, 0x66fab000, 0x40656f00,
  0x68115d80, 0x6206ea80, 0x5db42e00, 0x5949c900,
  0x7d433b80, 0x53c28880, 0x6ba68a00, 0x7589a480,
  0x461aab00, 0x57496600, 0x57b41b00, 0x6657a900,
  0x56ecd000, 0x49a02480, 0x53a07d00, 0x58e69a80,
  0x6dd55200, 0x40fd2280, 0x4b84e200, 0x4f091680,
  0x797bc000, 0x68f70700, 0x5f63c980, 0x7c62d280,
  0x66d0c080, 0x423fca80, 0x607dd600, 0x64cf3d80,
  0x474a5a00, 0x52015f00, 0x41d79300, 0x5b2a8e80,
  0x52064200, 0x7a917080, 0x4b7b5780, 0x41077a00,
  0x5c2cc780, 0x40bbad00, 0x41b0d000, 0x5e02ef80,
  0x63022b00, 0x6105c680, 0x68eb1a00, 0x786c8300,
  0x4091e400, 0x4b8b4680, 0x550a8080, 0x4dcb8f00,
  0x6f0a8080, 0x6b85c200, 0x524c3080, 0x5110a900,
  0x55a98000, 0x62aa6500, 0x78fa9780, 0x47a9b900,
  0x655eb980, 0x49a99e00, 0x62a6d400, 0x6d136c80,
  0x5ff8db80, 0x5f510780, 0x69dab700, 0x5e541800,
  0x66fe0e00, 0x4eca0600, 0x6dc90480, 0x4fd6e600,
  0x7b13b700, 0x44918080, 0x4dd3ab80, 0x4aa51180,
  0x4d05a980, 0x402b5300, 0x44281e00, 0x48876800,
};
constexpr size_t size_26 = 128;

const uint32_t buffer_27[128] = {
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff8, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffffb, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffffa,
  0xfffffffa, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffffa, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffffa,
  0xfffffff9, 0xfffffffb, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffffa, 0xfffffffa,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffffa, 0xfffffff9,
};
constexpr size_t size_27 = 128;

const uint32_t buffer_28[128] = {
  0x4ab93480, 0x7715bd80, 0x5e3d8700, 0x597d4100,
  0x4a90c700, 0x491adb80, 0x4b3f4200, 0x77ff4880,
  0x4a627180, 0x4a541c00, 0x459a2e00, 0x68f9cd80,
  0x47f15000, 0x5c079300, 0x5da45500, 0x592acb80,
  0x49aedc80, 0x66aa2f00, 0x64324580, 0x579a7e00,
  0x5f4b4700, 0x55a21780, 0x4d067880, 0x5edad780,
  0x63e43a00, 0x653ac080, 0x422a7280, 0x53f5ee80,
  0x43a93280, 0x576a3d00, 0x56c11a00, 0x678c4c00,
  0x4ca6ce80, 0x58824780, 0x4f222e80, 0x7aabb300,
  0x58ae9100, 0x4036c180, 0x5a988380, 0x50a55d80,
  0x73ec0100, 0x692bff80, 0x52385300, 0x525a7500,
  0x5720ce80, 0x4e51f280, 0x528b8080, 0x5cad8480,
  0x5c238a00, 0x58d9f400, 0x45622f00, 0x5d790380,
  0x472b5080, 0x48840400, 0x4b7c5c00, 0x4de58f00,
  0x48da7a00, 0x47f68c00, 0x46cf8a80, 0x6650d080,
  0x62e0aa00, 0x7c291100, 0x4c781e00, 0x4da72200,
  0x61715980, 0x582cc400, 0x67cab980, 0x4a80dd80,
  0x58926680, 0x53817900, 0x6b674c80, 0x5d268480,
  0x5af5df00, 0x55cedb80, 0x63543e80, 0x6574f500,
  0x67545880, 0x55149280, 0x56023080, 0x5432d780,
  0x76426e00, 0x5811bb80, 0x53416400, 0x59f03800,
  0x61df3880, 0x65d19e00, 0x7f6d2980, 0x41092d00,
  0x4bf9e400, 0x54ad2700, 0x4ea66400, 0x5fef2580,
  0x47aa7b00, 0x530bc280, 0x75055400, 0x5901cb00,
  0x421f7d00, 0x4d8a1a00, 0x44875a00, 0x48f0cc80,
  0x66325500, 0x4a049680, 0x69f0f080, 0x5bcb5600,
  0x56f3eb00, 0x53a17480, 0x4fa0fc80, 0x635c0280,
  0x48ca9b80, 0x4ec4f300, 0x48b0f700, 0x64055600,
  0x43d6a800, 0x42b3be00, 0x7bbdac80, 0x47676680,
  0x7fc59580, 0x43350980, 0x4f870600, 0x6894ce80,
  0x4f645800, 0x5ec12100, 0x50943b00, 0x57000000,
  0x48ec1b80, 0x5b787580, 0x67bf8400, 0x5bdadd80,
};
constexpr size_t size_28 = 128;

const uint32_t buffer_29[128] = {
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff9, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff9, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff9, 0xfffffff8, 0xfffffff7, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
};
constexpr size_t size_29 = 128;

const uint32_t buffer_30[128] = {
  0x5ce45b80, 0x43832480, 0x551b8980, 0x441ca680,
  0x5d382b80, 0x49fa0b80, 0x4976c880, 0x6e0be380,
  0x4a4b3380, 0x5607d980, 0x5177f300, 0x50003a00,
  0x543c2e80, 0x4bc91d80, 0x45280980, 0x4980f480,
  0x5378cd00, 0x6b5ad780, 0x5d257a00, 0x51fe7c80,
  0x586e4e00, 0x502d7400, 0x69a7c980, 0x5ac72800,
  0x49737980, 0x6398f700, 0x7b47d980, 0x558e7280,
  0x5cb4d100, 0x62b38880, 0x5634cb80, 0x47888500,
  0x756e6b00, 0x69873100, 0x7efa8b00, 0x66ad4080,
  0x5195e180, 0x6c0c4500, 0x510b2980, 0x57b1bc80,
  0x56883680, 0x46a9e580, 0x6dba4b00, 0x5b549a00,
  0x40c57080, 0x4fb0b200, 0x794abc80, 0x4dd72900,
  0x4c917500, 0x6acd7400, 0x61faec80, 0x539fcb80,
  0x676f5a00, 0x4cdbb500, 0x550dae80, 0x6ef43100,
  0x75704000, 0x597b0880, 0x7059d080, 0x48aaa580,
  0x532c7c00, 0x66972880, 0x50ea6580, 0x7be56e00,
  0x668c6400, 0x449a3280, 0x4fac9380, 0x44a81a00,
  0x45187d00, 0x5becde80, 0x6c3cb000, 0x757ba400,
  0x6e730e00, 0x475c0600, 0x77599300, 0x612c5700,
  0x650bed80, 0x57d53580, 0x70f93680, 0x659cd180,
  0x5b66c200, 0x4d0e2580, 0x4f8e2380, 0x56d24180,
  0x6ee1af80, 0x4e75e080, 0x6af35b00, 0x4b841c00,
  0x794c6300, 0x78927100, 0x633ba600, 0x5447b100,
  0x41129680, 0x44ae0c00, 0x4dd13b00, 0x4a36ad80,
  0x48797f00, 0x6f04c580, 0x6a8e2500, 0x6d720880,
  0x48508f00, 0x52538880, 0x4e461600, 0x7686f200,
  0x46599e80, 0x50f53500, 0x70e5cf00, 0x756f9700,
  0x5b704380, 0x4b2dc900, 0x59205b00, 0x7d323b80,
  0x6f54cf80, 0x4b93e180, 0x72619c00, 0x539e1700,
  0x48cb3380, 0x4f00f400, 0x56cf4500, 0x47d72900,
  0x4f65f100, 0x50111680, 0x4bb97880, 0x5ab79f00,
  0x78b92d00, 0x538f9d00, 0x56984500, 0x646bc300,
};
constexpr size_t size_30 = 128;

const uint32_t buffer_31[128] = {
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffff8, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
};
constexpr size_t size_31 = 128;

const uint32_t buffer_32[128] = {
  0x463c1280, 0x5436fe80, 0x51984000, 0x50112980,
  0x75bd8400, 0x7426d500, 0x50c46580, 0x4c903200,
  0x4e035980, 0x662a0400, 0x59aa5680, 0x56ea9f00,
  0x56d84600, 0x59ba1b00, 0x4539c300, 0x48222400,
  0x5d6add00, 0x60b50a00, 0x54b21700, 0x46b75680,
  0x5d57f800, 0x5467ab00, 0x5ae56600, 0x59c74380,
  0x613d4200, 0x5490bf80, 0x50f56c00, 0x63102600,
  0x5728ad00, 0x5771e900, 0x59665680, 0x62baf300,
  0x5f9e9f00, 0x4c12d680, 0x4cca3d80, 0x58b90600,
  0x75c9bc80, 0x5ee40600, 0x578af180, 0x4fb96e00,
  0x5c432780, 0x57303700, 0x493c9380, 0x532e1c00,
  0x45aecb80, 0x516cfb00, 0x63e5fe80, 0x633ada00,
  0x762c9a00, 0x729fe500, 0x5caec280, 0x76a6a400,
  0x55a50e00, 0x4c6faa00, 0x4033bc00, 0x5aa1f800,
  0x5872f980, 0x45601d80, 0x59412500, 0x55567300,
  0x40dfe180, 0x4fd1a980, 0x57e2ac80, 0x6476a180,
  0x4a82ba80, 0x57989a00, 0x43aa3280, 0x561eb880,
  0x50cf8f00, 0x54ea1580, 0x69c30180, 0x61bc4580,
  0x5f5e6c80, 0x72a91b80, 0x7515df00, 0x58149c80,
  0x7a3a6700, 0x4a1f7a80, 0x57469000, 0x4dd5f580,
  0x5a28c300, 0x726ee280, 0x6390c180, 0x5c608a00,
  0x74d15900, 0x564bd500, 0x7e9c2780, 0x4990c480,
  0x415a4780, 0x5a09dc00, 0x5313ae00, 0x5ff84900,
  0x52de2580, 0x61e8bf80, 0x4e781c00, 0x55e8a980,
  0x6f498000, 0x5e329980, 0x4b50f600, 0x4e70c700,
  0x6d8cb800, 0x468b7480, 0x6234ac80, 0x7d9c3300,
  0x62253680, 0x498fca00, 0x629b4b80, 0x7b05f280,
  0x46daba00, 0x4caa1180, 0x46be0280, 0x5808c800,
  0x5b7ce380, 0x58777b80, 0x5f7dd180, 0x57496d80,
  0x4f5c9280, 0x7d3dbb80, 0x54354700, 0x436b8080,
  0x50d41180, 0x4d9cae00, 0x54671000, 0x55ab8c80,
  0x64280c00, 0x49610d00, 0x535e3e80, 0x5645e300,
};
constexpr size_t size_32 = 128;

const uint32_t buffer_33[128] = {
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff7, 0xfffffff7, 0xfffffff8, 0xfffffff7,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff7,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
};
constexpr size_t size_33 = 128;

const uint32_t buffer_34[128] = {
  0x6cc52d00, 0x44e6af80, 0x49657a00, 0x5c00cb00,
  0x53080200, 0x5946c700, 0x54ece100, 0x68777c80,
  0x4bff6700, 0x48bca200, 0x66c91780, 0x7f354680,
  0x4ab59080, 0x46991480, 0x46bb9b80, 0x750bc500,
  0x7beee280, 0x5514c780, 0x4b077580, 0x73f18b80,
  0x78f4cb00, 0x48913c00, 0x463fb000, 0x4c6e8a00,
  0x456baa80, 0x7189ca00, 0x46e2f280, 0x46e15580,
  0x7bfadb80, 0x6312e800, 0x42be6d80, 0x6ab47600,
  0x5821f280, 0x71197500, 0x66cf7300, 0x7cc44580,
  0x6b662f00, 0x56b75300, 0x57bdbb80, 0x4e0a1d00,
  0x4337b300, 0x5a6ef100, 0x4aec6f80, 0x40ccff80,
  0x791bca00, 0x5aa59600, 0x50d61080, 0x5aff3280,
  0x4e80fd80, 0x54dc1a80, 0x57dae800, 0x43280580,
  0x69a13780, 0x4d34a880, 0x58470280, 0x58bf8c80,
  0x6327e480, 0x6c460b80, 0x6ff54c80, 0x532d8080,
  0x668b9880, 0x5d194300, 0x65600b00, 0x572d2600,
  0x6ca04f00, 0x49524b00, 0x47f5f280, 0x65309b80,
  0x4f700080, 0x723aff80, 0x42765700, 0x6c60f480,
  0x4d276400, 0x4c6dfe00, 0x5b2d1700, 0x72d2d500,
  0x5ae43180, 0x75087580, 0x50177280, 0x475fdf00,
  0x4f211400, 0x5f274a00, 0x41573d80, 0x4fb61f00,
  0x77eea580, 0x495fd380, 0x503d8580, 0x63cc2900,
  0x7d4f1480, 0x7987df80, 0x4cb68f80, 0x53d1d100,
  0x58a27800, 0x799a6580, 0x645a4000, 0x45a8ec00,
  0x7931c680, 0x43272780, 0x4d849280, 0x4b0cfb80,
  0x404e6480, 0x4d280480, 0x5bdfe500, 0x47cb7080,
  0x46c02b00, 0x521efd80, 0x7bb25580, 0x6d1b0100,
  0x55347000, 0x7f40a680, 0x4e206500, 0x7fbfe280,
  0x4b535380, 0x44928900, 0x5da59100, 0x5613e680,
  0x66084a00, 0x668cac00, 0x43b36280, 0x785f3e80,
  0x418f0280, 0x76e04b80, 0x4be51900, 0x46872180,
  0x56c07700, 0x456c0680, 0x51ca8b80, 0x5f2b1100,
};
constexpr size_t size_34 = 128;

const uint32_t buffer_35[128] = {
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff8,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffffa,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff8, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff8, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffffa, 0xfffffff8, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
};
constexpr size_t size_35 = 128;

const uint32_t buffer_36[128] = {
  0x474e1800, 0x5c227680, 0x492b7780, 0x545c7280,
  0x44b51780, 0x765c3880, 0x575d4280, 0x63a6a900,
  0x48468100, 0x64ecd480, 0x5e15df00, 0x5c0b1280,
  0x444f6e00, 0x545b5780, 0x55a24e80, 0x747ab400,
  0x4d386880, 0x46c12b00, 0x75232380, 0x64b91800,
  0x552ee180, 0x55b39f80, 0x4da8ce80, 0x4588c900,
  0x7b34b700, 0x419ec580, 0x40b77d80, 0x737c6a80,
  0x40004400, 0x58f4cf00, 0x53fb3700, 0x6a299e80,
  0x65602b80, 0x49b84980, 0x611d8300, 0x4434e500,
  0x5e403100, 0x56caca00, 0x46f94400, 0x6869b380,
  0x6644a380, 0x69aad900, 0x48a27c80, 0x537c5e80,
  0x461a8180, 0x4705fe00, 0x5d821d00, 0x53307580,
  0x59699e80, 0x5a47b280, 0x4d697000, 0x55215280,
  0x6330b780, 0x586f8900, 0x629b8380, 0x64abcf00,
  0x5564f680, 0x43f2e080, 0x53ae7300, 0x567a0c00,
  0x4f5e3d80, 0x52952d80, 0x4569c580, 0x597ceb00,
  0x65719d80, 0x550e6180, 0x5ce60300, 0x59535a80,
  0x460eac00, 0x58318680, 0x738acc00, 0x47149580,
  0x54caf580, 0x56173400, 0x7ce13200, 0x6eb02e80,
  0x54e23b80, 0x60c38880, 0x5a863f00, 0x5897a400,
  0x5af7a400, 0x52ff6c80, 0x646bd380, 0x646f7180,
  0x5352c980, 0x497e1300, 0x4b6a4c00, 0x53c71f00,
  0x6b2f5900, 0x6c59e980, 0x7638e280, 0x633dd800,
  0x4f4abb80, 0x57ef1d00, 0x527e0400, 0x526a8500,
  0x4afaa080, 0x641dc380, 0x45118300, 0x5b0cca00,
  0x54df4a80, 0x4a34bb80, 0x4fd3d400, 0x4c0f4000,
  0x60840280, 0x4ec6fb80, 0x5b65bc80, 0x4756ef00,
  0x4a10d400, 0x437ced80, 0x40952180, 0x4b08e080,
  0x7b668080, 0x6207a380, 0x7b0dd080, 0x4fe7a780,
  0x4afb7d80, 0x4fd61b80, 0x702f6280, 0x45171680,
  0x7f3cab80, 0x57d3f980, 0x5dfe4a00, 0x7b96bc00,
  0x4ad68780, 0x50eb8e00, 0x51660700, 0x64c8b800,
};
constexpr size_t size_36 = 128;

const uint32_t buffer_37[128] = {
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff7,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff7, 0xfffffff9, 0xfffffff8, 0xfffffff8,
  0xfffffff9, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff9, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff9,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff7,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
};
constexpr size_t size_37 = 128;

const uint32_t buffer_38[128] = {
  0x5c1be580, 0x617b2180, 0x74792200, 0x65614780,
  0x681e6200, 0x79936700, 0x5ab7c280, 0x6c42d200,
  0x6815d380, 0x503acf00, 0x6de04e00, 0x43c18c80,
  0x75a74b80, 0x429e5180, 0x53199100, 0x47584380,
  0x44b4b080, 0x7e9e9700, 0x569b7000, 0x52471000,
  0x408bae80, 0x64a40800, 0x773f0f80, 0x6f391e00,
  0x4f7e5b80, 0x48a6ad80, 0x5c85e380, 0x58b59f80,
  0x71cf0880, 0x51762e00, 0x7287d700, 0x78f46600,
  0x42014000, 0x407ef080, 0x625a9a00, 0x5d5bc600,
  0x55726f00, 0x787d1f00, 0x461fa780, 0x53dc5400,
  0x70dbd880, 0x4a04c080, 0x486f6300, 0x565f1780,
  0x40b2ff00, 0x454d2480, 0x6bab1e80, 0x622f1080,
  0x46beb080, 0x44ad7c80, 0x70583480, 0x7bd2c780,
  0x41933b00, 0x70a26580, 0x46bd1400, 0x750d7280,
  0x4e6eb200, 0x785aab80, 0x76f71100, 0x7e10d180,
  0x4524d780, 0x6e252b00, 0x61f49180, 0x65ac1600,
  0x4ff40900, 0x7a696800, 0x4fcecb00, 0x75102400,
  0x47b1b180, 0x684ce800, 0x6b693800, 0x49dab380,
  0x55cebc80, 0x79a6ad80, 0x4e9d1700, 0x64ce3500,
  0x45ffa200, 0x57570980, 0x43031400, 0x572c8280,
  0x6a0f4a80, 0x53b72500, 0x4abd6480, 0x5f31e580,
  0x77c54100, 0x6b9fc300, 0x4add7d80, 0x4e5c4780,
  0x757a5480, 0x5c32f100, 0x69a54580, 0x6fd75b80,
  0x7fba5d80, 0x49068600, 0x6a861700, 0x7ffb5a80,
  0x5782d280, 0x5edf4a80, 0x4f3de180, 0x6d677100,
  0x5ffef480, 0x4d8e2b80, 0x710ff900, 0x79c4c580,
  0x455b4180, 0x6b07a600, 0x40634c00, 0x4869c080,
  0x5d917400, 0x4cfd0700, 0x733f3200, 0x674c8900,
  0x4cab9000, 0x70d32880, 0x5bc6af80, 0x437e6700,
  0x6f9e8b80, 0x78346880, 0x6a9c1000, 0x50a70980,
  0x7cb7b680, 0x61fa2780, 0x404fde80, 0x7a520780,
  0x498fb500, 0x41c0dd80, 0x7ae35780, 0x7bd0ae00,
};
constexpr size_t size_38 = 128;

const uint32_t buffer_39[128] = {
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff8, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff8,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff8, 0xfffffff9, 0xfffffff8,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff8, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff8, 0xfffffff9, 0xfffffffa, 0xfffffffa,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff8, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff8, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
};
constexpr size_t size_39 = 128;

const uint32_t buffer_40[128] = {
  0x563b7800, 0x4f132600, 0x4ec29500, 0x4929d380,
  0x4779e700, 0x420a8780, 0x7f496700, 0x70f3cd80,
  0x4d678b80, 0x5897f580, 0x73708a80, 0x5c022d00,
  0x4c97e880, 0x4dfc5900, 0x473c3180, 0x60b1c000,
  0x5ecc3f00, 0x4987f580, 0x56b01880, 0x5a3ff080,
  0x56d34480, 0x6b8f0c00, 0x4e661a80, 0x54b38b00,
  0x533ed380, 0x51771d00, 0x71040400, 0x4cde8200,
  0x604ba200, 0x53751380, 0x46eeb500, 0x7dab7200,
  0x4fad2500, 0x7fc92d00, 0x59228e00, 0x54489f00,
  0x6e3a4980, 0x53aa0e00, 0x4fdaec80, 0x4c2ac280,
  0x57873780, 0x4b3fd700, 0x4e1eb700, 0x7b86fe00,
  0x4d8c4100, 0x4184e280, 0x4ada5780, 0x63775480,
  0x4a36b280, 0x68ba9480, 0x4e7c0580, 0x6e66b080,
  0x55198280, 0x438e5b80, 0x5a391300, 0x5ff3ac80,
  0x50f46b00, 0x5e9d4500, 0x4df95f00, 0x435a3b00,
  0x7d0df500, 0x7b87f580, 0x55ab1500, 0x50606500,
  0x629e0a80, 0x4edf4c00, 0x5046c600, 0x6c227100,
  0x741d8280, 0x457bcf80, 0x7ef87100, 0x7d779580,
  0x4ed3c700, 0x75617300, 0x580bf880, 0x4ecb2a80,
  0x43ff7a00, 0x76d99c80, 0x7f201580, 0x4c514200,
  0x5114fe00, 0x48d76480, 0x55875280, 0x43861580,
  0x649d7800, 0x639f6e00, 0x4dc09a80, 0x79064e80,
  0x4dd74a80, 0x4c087100, 0x4eb44280, 0x69233a00,
  0x5d5dcc80, 0x627b9400, 0x6e7f5b80, 0x57821080,
  0x5c1d9d80, 0x5104c900, 0x44505e80, 0x40ed3000,
  0x71e76680, 0x5b122c80, 0x7fb30500, 0x43b76a00,
  0x4bb0dc80, 0x527a9c00, 0x651f6880, 0x4c96bb80,
  0x4dbfac80, 0x4514dc00, 0x46547d80, 0x4b51ed80,
  0x580b9980, 0x688b4e00, 0x5e0dc880, 0x557e2e00,
  0x46d8c080, 0x50214f00, 0x49069700, 0x49cc7000,
  0x52214700, 0x4b021880, 0x46358800, 0x4a56dc80,
  0x45af2b80, 0x65b2a900, 0x4bf91780, 0x4d4d3080,
};
constexpr size_t size_40 = 128;

const uint32_t buffer_41[128] = {
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff7,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff7,
  0xfffffff8, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff7,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff7, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff9, 0xfffffff7, 0xfffffff7,
  0xfffffff8, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff7, 0xfffffff7, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff7,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff7, 0xfffffff8, 0xfffffff7, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
};
constexpr size_t size_41 = 128;

const uint32_t buffer_42[128] = {
  0x63da3000, 0x6ec27900, 0x4478a180, 0x5e57a200,
  0x50404280, 0x52d2d080, 0x6c10d280, 0x45648180,
  0x711d8b00, 0x4beb9400, 0x4a386880, 0x61053400,
  0x41f54400, 0x53ec2580, 0x6d95f900, 0x498c8d80,
  0x7f2d0400, 0x50a90e80, 0x54c6d200, 0x5c288a80,
  0x5bd7f400, 0x717a9000, 0x6e5cd680, 0x63ac6b80,
  0x6e792680, 0x6c480480, 0x5310d000, 0x554a5300,
  0x4aef1a00, 0x47544b00, 0x7178f600, 0x77bac300,
  0x7b9ee900, 0x7dfd8300, 0x54d7ff80, 0x7757c200,
  0x4939f680, 0x64ec9300, 0x66f1f800, 0x5736aa00,
  0x7a594a80, 0x48032600, 0x53166480, 0x564a7a00,
  0x47c8db00, 0x4b3fd980, 0x6d136c00, 0x6afb9100,
  0x791b1780, 0x571aa780, 0x4ffa5e80, 0x75f52b80,
  0x63ec8780, 0x7aedd100, 0x67102980, 0x58b03c80,
  0x5a489000, 0x4a91de00, 0x790d4180, 0x64b88480,
  0x580bfb00, 0x62e34e80, 0x514bb880, 0x7c4f1600,
  0x4abce480, 0x557f0500, 0x502c4180, 0x4e31de00,
  0x52a8a180, 0x71729980, 0x6c599f80, 0x5ff17300,
  0x74f6e700, 0x509fed80, 0x63a3f600, 0x62d3ce80,
  0x41d59700, 0x784bfe80, 0x4404b080, 0x7df12600,
  0x53a0cd80, 0x4fd85d80, 0x6858b600, 0x78819a80,
  0x61c9b180, 0x6d7edf00, 0x7d7f4c80, 0x5b37d180,
  0x76037900, 0x495e8280, 0x4af50980, 0x68545f80,
  0x7c17fa80, 0x556a5c80, 0x4f9a9e80, 0x56591200,
  0x4d3e2480, 0x6fc32a80, 0x4c5a6b00, 0x68473c00,
  0x7228d080, 0x49305200, 0x64434700, 0x73e36e00,
  0x75d79080, 0x503dfd80, 0x7cab7b00, 0x54de0a00,
  0x657a8f00, 0x4a2f9980, 0x4530f080, 0x4fef9b80,
  0x7f8dad80, 0x5e3f8580, 0x6466ce80, 0x6ff27100,
  0x64a88180, 0x608c7c00, 0x5072b800, 0x7b7dcb00,
  0x78c1bc00, 0x66a77480, 0x5a12e880, 0x74529c00,
  0x49426380, 0x5058de80, 0x5ad11780, 0x46f70180,
};
constexpr size_t size_42 = 128;

const uint32_t buffer_43[128] = {
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff8,
  0xfffffff9, 0xfffffff9, 0xfffffff8, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffffa, 0xfffffff8, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff8,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff8, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffffa, 0xfffffffa,
};
constexpr size_t size_43 = 128;

const uint32_t buffer_44[128] = {
  0x69c56b80, 0x5ced9c00, 0x66cc9300, 0x496ab600,
  0x52a36600, 0x744d2580, 0x53ffe880, 0x43b06280,
  0x47553300, 0x43269500, 0x444c3f00, 0x54a26900,
  0x5cbdc600, 0x40ee7b00, 0x50f50f80, 0x411a6800,
  0x6c85cc00, 0x5ab4b600, 0x7e343400, 0x4db5a380,
  0x5015a280, 0x40bd5880, 0x47974a80, 0x53adb300,
  0x67377300, 0x46d62f00, 0x51481800, 0x56cf2a00,
  0x750ce400, 0x519e4700, 0x52b83280, 0x4a3cfa00,
  0x49a49480, 0x60157e00, 0x5d9a2e00, 0x7c291500,
  0x4c28b700, 0x7b122980, 0x523b1980, 0x47efb000,
  0x4693e280, 0x5bbf7d80, 0x484c5400, 0x587c1b80,
  0x70ed0580, 0x654dbe80, 0x476b5080, 0x53c39980,
  0x604e9180, 0x50761c80, 0x437d7780, 0x46cc4e00,
  0x41a9a380, 0x4ea1cc80, 0x40f08400, 0x4a1a3800,
  0x70fed700, 0x47607580, 0x508f8900, 0x41dd7a80,
  0x4bda0c80, 0x56c91b00, 0x5b5ea780, 0x5008d800,
  0x69003100, 0x4e2f4700, 0x502e4d00, 0x4d641780,
  0x5678c300, 0x49b69300, 0x7d3d1500, 0x484ed300,
  0x4769db80, 0x5f695080, 0x45a77080, 0x4e1a5200,
  0x74b39180, 0x77dbc600, 0x583e2c00, 0x5112ba80,
  0x40ac6700, 0x7b829b80, 0x51625480, 0x5901fe80,
  0x4368b200, 0x48a2d900, 0x78f9b480, 0x416d5880,
  0x61501b00, 0x62a71600, 0x465f8200, 0x631d4700,
  0x5f568380, 0x4367c100, 0x73536e00, 0x487a8880,
  0x79f78480, 0x48813680, 0x7fb7e780, 0x775b0500,
  0x52ce8080, 0x528d1700, 0x5a546380, 0x52184f00,
  0x7444f280, 0x5d874f00, 0x4681e780, 0x5bd4e780,
  0x4f776f00, 0x444e8000, 0x5861cd00, 0x4a596680,
  0x54df1900, 0x47050f00, 0x4e435c80, 0x4e92b480,
  0x59fb1e80, 0x422f2080, 0x5aa05800, 0x4b23d400,
  0x5133fd00, 0x40b50680, 0x46edce80, 0x62e0b880,
  0x42d9f180, 0x51f82800, 0x667d7000, 0x4ed55b80,
};
constexpr size_t size_44 = 128;

const uint32_t buffer_45[128] = {
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff7, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff7,
  0xfffffff8, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff7, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff9, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff8,
  0xfffffff7, 0xfffffff8, 0xfffffff7, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff7, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
};
constexpr size_t size_45 = 128;

const uint32_t buffer_46[128] = {
  0x58468000, 0x4ac3f980, 0x4330d000, 0x6c446300,
  0x4b8edc00, 0x47c01700, 0x5668ca80, 0x6dc58100,
  0x4b6a8700, 0x45a2ab00, 0x5ff89480, 0x4f401980,
  0x6c6ec200, 0x58e51100, 0x53eafa00, 0x66f74980,
  0x4c523b80, 0x72da3280, 0x5cc5aa80, 0x56002d00,
  0x59a48000, 0x4d3d8e00, 0x6e086b00, 0x5c73b680,
  0x4493f800, 0x70225d80, 0x5e6c4280, 0x497cde00,
  0x76fd4700, 0x6915aa80, 0x68fe1b80, 0x7e7f0d80,
  0x6d4da880, 0x7958f380, 0x58b20a80, 0x771a4200,
  0x73082700, 0x7eb0e200, 0x48a13c00, 0x49e82280,
  0x41b1f400, 0x5137ce80, 0x41eb4680, 0x6113ff00,
  0x54b3ed00, 0x60f7f480, 0x4ecdd580, 0x4656b200,
  0x53223100, 0x53c3a980, 0x50d4a680, 0x491c1980,
  0x74068d00, 0x7f8eed00, 0x7099b480, 0x7af68680,
  0x49c15100, 0x6fbeac80, 0x402e9d00, 0x58a81000,
  0x76327700, 0x7895f580, 0x624b5000, 0x446e1480,
  0x57cdc900, 0x730adc80, 0x4ac2d680, 0x649d5900,
  0x63a46680, 0x442da380, 0x5f31c680, 0x46e05200,
  0x577bc880, 0x496ecc00, 0x5aff1600, 0x56a00180,
  0x79b23b00, 0x57295600, 0x69660300, 0x503d8080,
  0x6a33d600, 0x7e1d1680, 0x56c7c080, 0x65e4d700,
  0x79f1e380, 0x6d675f80, 0x7113db00, 0x5b7c8280,
  0x4ae90900, 0x735e4980, 0x770caf00, 0x74aba700,
  0x49472d80, 0x5c4f9900, 0x5e8b8800, 0x45d26f00,
  0x516d0a00, 0x62802f80, 0x65eac780, 0x50db7f80,
  0x44a24b80, 0x4c183f00, 0x51512900, 0x52ff6680,
  0x6a761800, 0x52fd7e00, 0x4446d580, 0x62f12700,
  0x5b404180, 0x585e5f80, 0x7ae0a980, 0x513a0980,
  0x65b0bd00, 0x5e64fc80, 0x6242c200, 0x63b74a80,
  0x49c87800, 0x679f6600, 0x4469db00, 0x4d8c8400,
  0x6e45da80, 0x40705700, 0x5a1c6f80, 0x513a6b00,
  0x65f65c00, 0x548fd800, 0x461f7100, 0x42f09d00,
};
constexpr size_t size_46 = 128;

const uint32_t buffer_47[128] = {
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff8, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff8, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff8, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff8, 0xfffffff9, 0xfffffffa, 0xfffffffa,
};
constexpr size_t size_47 = 128;

const uint32_t buffer_48[256] = {
  0x47f0e600, 0x5fa60b80, 0x75018200, 0x6f79e600,
  0x67518800, 0x702c8000, 0x54ef2e80, 0x56401080,
  0x753a7c00, 0x42f18100, 0x41d8ec00, 0x7ea9bb80,
  0x64c44b00, 0x462c2c00, 0x6d887d80, 0x4bfa1500,
  0x530f2300, 0x62905900, 0x43370d00, 0x42ab9500,
  0x56fab380, 0x41166800, 0x7bfac500, 0x6eb99c00,
  0x475c5080, 0x54047500, 0x47bc2400, 0x52b18380,
  0x7436c080, 0x41e41280, 0x59db8000, 0x4d535780,
  0x462b3f80, 0x43b2c480, 0x5f575a80, 0x7d775a00,
  0x6fc40d00, 0x7d37e480, 0x62dc1900, 0x54303900,
  0x54ceec80, 0x437c4180, 0x41d81200, 0x6e88dc00,
  0x791a6700, 0x7da23b80, 0x729f1600, 0x725f7400,
  0x5b1fc580, 0x49164000, 0x44bd5880, 0x630b4180,
  0x51662380, 0x7bd2e580, 0x46bf5580, 0x461f1100,
  0x51616680, 0x7dc5ad00, 0x684a9000, 0x434f0280,
  0x681a9180, 0x5093d880, 0x60c58400, 0x469eb280,
  0x57790f80, 0x47b4be00, 0x44cea680, 0x47c7e680,
  0x6438f300, 0x43144f00, 0x40400400, 0x7f8ac000,
  0x639a7880, 0x43103a00, 0x41837f00, 0x6bbd5b80,
  0x49f23700, 0x411f7480, 0x526a9880, 0x4f8c7780,
  0x63640e00, 0x6469d980, 0x4ef7a800, 0x4cace600,
  0x6ee36700, 0x496f2500, 0x4f13f200, 0x64cff780,
  0x66795200, 0x52a31b00, 0x51d9a080, 0x5f995b00,
  0x43e2d900, 0x5c039300, 0x4e712180, 0x4c705380,
  0x7feeb700, 0x7fdc9780, 0x4a179680, 0x45f84580,
  0x44418400, 0x45ad8300, 0x641d4a00, 0x74921200,
  0x47c3cd00, 0x43e8b200, 0x6d72ef80, 0x73001d00,
  0x61167080, 0x702a3600, 0x47748580, 0x73717e80,
  0x4b75ff80, 0x66f8ab80, 0x5859f200, 0x7849b180,
  0x64275780, 0x564d5a00, 0x5037d080, 0x54900c80,
  0x45113980, 0x4fd43080, 0x6cda8b80, 0x77695280,
  0x7f70d380, 0x7b5e8800, 0x6bb7ee80, 0x79ea1080,
  0x6cfa0c80, 0x46420400, 0x7e3e4900, 0x4c1d5a80,
  0x75711a00, 0x42608700, 0x6b776200, 0x74684e00,
  0x429c4380, 0x5ba0ef00, 0x54dd0580, 0x40da7580,
  0x71233f80, 0x51af0180, 0x7341ab00, 0x44d5de80,
  0x51aa7000, 0x5ed86a80, 0x57d95500, 0x56e68c00,
  0x6d791300, 0x41974600, 0x4324bc80, 0x7d147980,
  0x4d151c00, 0x5f2a1b00, 0x4915dd80, 0x67dd7b80,
  0x4925f680, 0x4e553d80, 0x4d5d5300, 0x489fb780,
  0x4799bf00, 0x448f6780, 0x76567c80, 0x5a8a0d00,
  0x72302080, 0x51174e80, 0x510a9100, 0x5662b080,
  0x6b292f80, 0x542a1600, 0x652ac180, 0x634ee700,
  0x7d63a800, 0x7ee72b80, 0x544fb300, 0x7126b580,
  0x47317680, 0x7af60500, 0x44594880, 0x52f93880,
  0x4364b780, 0x44c42a80, 0x696b4080, 0x7bd0cb80,
  0x78223180, 0x7c35ca00, 0x40a8ef00, 0x7a779100,
  0x45ce1680, 0x5cd98400, 0x7fc1dc80, 0x7d86aa80,
  0x4883c600, 0x608b7f80, 0x43770680, 0x440bd900,
  0x7e259880, 0x57af6d00, 0x523fb000, 0x565d9e80,
  0x4dd4f180, 0x4b12cc80, 0x54ae1900, 0x5b367100,
  0x60100f00, 0x595eba00, 0x7b6fc180, 0x4ea6f900,
  0x4ef37e80, 0x769d6400, 0x5027c280, 0x69ac2480,
  0x43276280, 0x54771b00, 0x6de53780, 0x449af200,
  0x545d8f80, 0x4044a600, 0x47c68600, 0x49ba4700,
  0x577a2d80, 0x65f04980, 0x44e30a00, 0x45780380,
  0x4faa1e00, 0x5d80ed00, 0x744e2c80, 0x45f56380,
  0x79440a80, 0x6c61de00, 0x4a6b6600, 0x5a306500,
  0x403ffc80, 0x43fc1880, 0x53561680, 0x6d080100,
  0x6d6e2c00, 0x429db280, 0x50d0b980, 0x46d89580,
  0x717bf900, 0x61e0c100, 0x48796380, 0x63f92100,
  0x789d9980, 0x50373b00, 0x43adcb80, 0x48b5f400,
  0x50ede980, 0x5c04c580, 0x46916b80, 0x7f549c80,
  0x73798d80, 0x431f0a80, 0x65759080, 0x61cbf980,
};
constexpr size_t size_48 = 256;

const uint32_t buffer_49[256] = {
  0xfffffff8, 0xfffffff7, 0xfffffff7, 0xfffffff7,
  0xfffffff8, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff7, 0xfffffff8, 0xfffffff8, 0xfffffff7,
  0xfffffff7, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff7,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff7, 0xfffffff8, 0xfffffff7, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff7,
  0xfffffff8, 0xfffffff7, 0xfffffff7, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff7,
  0xfffffff7, 0xfffffff7, 0xfffffff7, 0xfffffff7,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff7,
  0xfffffff8, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff7, 0xfffffff7, 0xfffffff8,
  0xfffffff7, 0xfffffff8, 0xfffffff7, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff7, 0xfffffff8, 0xfffffff8, 0xfffffff7,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff7,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff9,
  0xfffffff8, 0xfffffff7, 0xfffffff8, 0xfffffff7,
  0xfffffff7, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff7, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff7, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff7,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff7,
  0xfffffff8, 0xfffffff7, 0xfffffff8, 0xfffffff7,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff7,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff7,
  0xfffffff7, 0xfffffff7, 0xfffffff7, 0xfffffff7,
  0xfffffff7, 0xfffffff8, 0xfffffff7, 0xfffffff8,
  0xfffffff7, 0xfffffff8, 0xfffffff8, 0xfffffff7,
  0xfffffff8, 0xfffffff7, 0xfffffff7, 0xfffffff8,
  0xfffffff7, 0xfffffff8, 0xfffffff7, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff7, 0xfffffff8, 0xfffffff8, 0xfffffff7,
  0xfffffff8, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff7,
  0xfffffff7, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff7, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff7, 0xfffffff7, 0xfffffff8, 0xfffffff7,
  0xfffffff8, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff7,
  0xfffffff7, 0xfffffff7, 0xfffffff8, 0xfffffff7,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff7,
  0xfffffff8, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff7, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff7, 0xfffffff8, 0xfffffff7, 0xfffffff8,
  0xfffffff8, 0xfffffff7, 0xfffffff8, 0xfffffff7,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff7, 0xfffffff7, 0xfffffff8,
  0xfffffff7, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff7,
  0xfffffff7, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff7, 0xfffffff7, 0xfffffff8, 0xfffffff8,
  0xfffffff7, 0xfffffff8, 0xfffffff8, 0xfffffff8,
  0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff7,
  0xfffffff7, 0xfffffff8, 0xfffffff8, 0xfffffff8,
};
constexpr size_t size_49 = 256;

const uint32_t buffer_50[256] = {
  0x60388700, 0x73ed7400, 0x6b5cf200, 0x7cb52a00,
  0x5f863380, 0x458e1200, 0x58c7b500, 0x52046e00,
  0x5f3e5900, 0x5256c000, 0x6ddea880, 0x617fd980,
  0x775e4300, 0x76e5ac80, 0x563fdd80, 0x4b5ba480,
  0x6a756180, 0x5ff6a280, 0x4c33c180, 0x468dd280,
  0x52ae0400, 0x440b8e80, 0x426e2f80, 0x4585ea80,
  0x4b4ed600, 0x6d917d80, 0x775be800, 0x48915380,
  0x5006c480, 0x591fc780, 0x67392d80, 0x5b10bb00,
  0x64814d80, 0x75d1ed80, 0x41ef6980, 0x43ef2900,
  0x586c2b00, 0x7fe92580, 0x6915be80, 0x59c3e500,
  0x46f3f880, 0x40866100, 0x6b49de00, 0x72fe4e80,
  0x79480880, 0x7fd10780, 0x443d7e00, 0x56c59a00,
  0x7f77bd80, 0x7282f480, 0x6f329a80, 0x6c636780,
  0x54f06200, 0x49c3db00, 0x578b8400, 0x6e3b8900,
  0x6ffefc00, 0x72777680, 0x51d59f00, 0x5b562600,
  0x7e145700, 0x5d8eb180, 0x41229080, 0x67e52c00,
  0x544daf80, 0x4e957800, 0x6c901000, 0x4c516d00,
  0x45b1ad80, 0x46a84b80, 0x65eabb80, 0x4e627d80,
  0x6ea55300, 0x7a158e80, 0x4466b880, 0x7c84e980,
  0x62ac9b00, 0x42252880, 0x57e54980, 0x7ab74000,
  0x529af680, 0x6de2a900, 0x531a0500, 0x758bcd00,
  0x5cd66880, 0x45614d80, 0x5734ff80, 0x77a6ab80,
  0x48363d80, 0x74713700, 0x65a76f00, 0x6e6cfb00,
  0x43fbb880, 0x64c07280, 0x45f76880, 0x415e0480,
  0x47f5a900, 0x4b30a100, 0x66697980, 0x7440f600,
  0x4a977000, 0x4f9a0700, 0x7ca4e980, 0x40818e00,
  0x72c7bb80, 0x44966b00, 0x6e917080, 0x54dc8200,
  0x4d951780, 0x5917c380, 0x665bc880, 0x7ba3af00,
  0x6924df80, 0x41adc280, 0x4dceea00, 0x64c2b780,
  0x4154da00, 0x4c74a300, 0x6902a080, 0x71a30180,
  0x479c4000, 0x58159600, 0x5f13a180, 0x78a3a980,
  0x42e30880, 0x43d7b500, 0x5fb1c780, 0x4e927180,
  0x72a8a900, 0x679ce380, 0x6b18c980, 0x434b8a80,
  0x45e43680, 0x43995400, 0x649f6d80, 0x58bef600,
  0x67776280, 0x48589d00, 0x692d4c80, 0x4e701b00,
  0x4457e980, 0x55f68000, 0x75693080, 0x6e29a180,
  0x4cbd6880, 0x52268a00, 0x45fdfb00, 0x48621000,
  0x49363700, 0x4f38ed80, 0x41569f80, 0x52b69200,
  0x5cba0700, 0x4aff6380, 0x6e34f400, 0x46126e80,
  0x422ba380, 0x7cf9e780, 0x77fe0980, 0x4e61b100,
  0x7d228100, 0x78fe8680, 0x4e45b880, 0x64d5eb80,
  0x4a2e9400, 0x7338f280, 0x4dd09d00, 0x7c662480,
  0x7ce6c900, 0x52763980, 0x4050ce80, 0x5aca6080,
  0x4bac5f80, 0x42e5f080, 0x727fbe80, 0x5915f400,
  0x514c8780, 0x64fb1580, 0x62763e80, 0x5031f300,
  0x4bbd7a80, 0x53611e80, 0x79552f80, 0x62833900,
  0x668eed80, 0x40a1ce00, 0x5517d600, 0x637dc000,
  0x72cfff00, 0x4542ba00, 0x4b0e9c00, 0x6c1f6880,
  0x58cab500, 0x7c83fb80, 0x5582c100, 0x6d71d780,
  0x64f5bd00, 0x4a42ab00, 0x5cc12c00, 0x53e3f680,
  0x58937d00, 0x4681ee80, 0x5db34100, 0x595de180,
  0x547bf880, 0x50c03880, 0x40938b00, 0x42117d00,
  0x63db7c00, 0x55a31980, 0x70e7b280, 0x73bcbc00,
  0x7d4d6980, 0x4020c380, 0x4ba77900, 0x54d4ca80,
  0x49284780, 0x703dd180, 0x4164f900, 0x5927a580,
  0x5312e600, 0x4d03fe00, 0x42cbf500, 0x54cd8500,
  0x7c32ff00, 0x45405600, 0x76b7d780, 0x646d4300,
  0x41fbe980, 0x48047980, 0x69b4a780, 0x48635680,
  0x72bd7b00, 0x4f291180, 0x61666400, 0x64b20d80,
  0x54b65300, 0x6d4dd500, 0x40b93480, 0x715d2c80,
  0x52a77080, 0x6d9dbc80, 0x59bd7680, 0x7abed280,
  0x4a5fcf80, 0x54c0bf80, 0x45ff8200, 0x5106c080,
  0x4be94880, 0x4c8e6500, 0x4f188200, 0x76a16280,
  0x555a9480, 0x475c4400, 0x630dd680, 0x7fba6280,
};
constexpr size_t size_50 = 256;

const uint32_t buffer_51[256] = {
  0xfffffffa, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffffa, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffff9, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffffa,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffffa, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffffa,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffffa,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffffb, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffffa,
  0xfffffffa, 0xfffffff9, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffffb, 0xfffffffa, 0xfffffffa,
  0xfffffff9, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffffa, 0xfffffffa,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffffa, 0xfffffffa,
  0xfffffff9, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffffa, 0xfffffff9,
  0xfffffffa, 0xfffffff9, 0xfffffff9, 0xfffffff9,
  0xfffffffa, 0xfffffffa, 0xfffffffa, 0xfffffffa,
  0xfffffffa, 0xfffffffa, 0xfffffffa, 0xfffffff9,
  0xfffffff9, 0xfffffffa, 0xfffffff9, 0xfffffff9,
};
constexpr size_t size_51 = 256;

const uint32_t buffer_52[256] = {
  0x45c7a776, 0x6c10bdbb, 0x5e4cf241, 0x56e76f1c,
  0x6140cf8d, 0x6eda422a, 0x7abab436, 0x5e70ed52,
  0x46604192, 0x55a7446d, 0x45dfe83d, 0x702f0baa,
  0x593004b2, 0x74e98957, 0x721e0941, 0x43ce2927,
  0x49284a60, 0x6ddea859, 0x62f7c731, 0x4fc7e9ec,
  0x5cc11c85, 0x7db5d4ca, 0x515638cd, 0x7e90651d,
  0x60036fe1, 0x7ad35ac5, 0x71278dfa, 0x52d00786,
  0x60997b5a, 0x749e21ee, 0x44e8d449, 0x4e261f59,
  0x5b6a26af, 0x41cb6e6f, 0x7e790380, 0x789c670c,
  0x429bd2c1, 0x68cb6a40, 0x4892b103, 0x7cd18208,
  0x5382a395, 0x447e6418, 0x5391ef65, 0x4e34d2cc,
  0x5b885a6b, 0x6457ac4d, 0x7bccb68e, 0x73461b9f,
  0x57d1ae80, 0x54e0f190, 0x448ae8af, 0x63cefc5d,
  0x7276777d, 0x419583be, 0x777a6883, 0x4ff07820,
  0x5464c26d, 0x7e7fc206, 0x71bf5217, 0x45b714cf,
  0x45db3add, 0x410d6629, 0x51932fc6, 0x789dba89,
  0x61a3f9ef, 0x43687b83, 0x6758d2cd, 0x7b4f8f99,
  0x7ad9494d, 0x47d7306c, 0x494dfbde, 0x782c65e4,
  0x5237264b, 0x430ba89b, 0x6abeb1f6, 0x6893e9b1,
  0x68d3fe7e, 0x44aec984, 0x71e135b0, 0x5731ba08,
  0x403d1a7f, 0x6cc165b9, 0x575081b3, 0x7b995521,
  0x5b44dfb7, 0x60928e0d, 0x722a276e, 0x637c26af,
  0x7b89fb69, 0x403c6edb, 0x5124f01b, 0x6a628738,
  0x40666477, 0x44cb4aee, 0x5bf0e83f, 0x6212bd19,
  0x533a688b, 0x48bf1462, 0x5fe0b7de, 0x6cffd397,
  0x6c2c2eab, 0x6a0c68b8, 0x69eb69fa, 0x460d93b8,
  0x5726be09, 0x6e94938c, 0x6aff5502, 0x6aab2fa1,
  0x4d222757, 0x43dd934e, 0x54a842d0, 0x6a3b037c,
  0x52ce8032, 0x616cc0d0, 0x7124a032, 0x53205ccb,
  0x5a41e445, 0x7527bc69, 0x66e01084, 0x69920f4d,
  0x45d701d0, 0x64358144, 0x68524414, 0x437ec32b,
  0x4614a8da, 0x69255654, 0x65efe5c1, 0x4d9407b3,
  0x4a588023, 0x62357fdc, 0x664eadfe, 0x501a0937,
  0x4461a09d, 0x67de3d14, 0x495ca4e3, 0x54c942d2,
  0x4f7e3576, 0x4c5cf79a, 0x685ecfa0, 0x7af11339,
  0x4b75a418, 0x7b356bd3, 0x7f859d58, 0x46803c2b,
  0x4373a508, 0x41ec3ffa, 0x485f989a, 0x4741ffb0,
  0x4d7a8481, 0x71c6cb1c, 0x47aed56c, 0x7c23e300,
  0x68953963, 0x60d51e35, 0x4ce76b3d, 0x44bbf27a,
  0x7a481dc7, 0x6478d608, 0x7d3fa031, 0x7f20ef6d,
  0x67a0a587, 0x7db763b4, 0x7421d3d1, 0x41669588,
  0x7abd6732, 0x7608122d, 0x642df17d, 0x7f47a32c,
  0x5d189432, 0x66891e3b, 0x41aeb470, 0x6408f8e9,
  0x57c271dd, 0x71d3cce0, 0x7e6ae49e, 0x7f168942,
  0x55d73350, 0x4022793c, 0x47c2b36c, 0x41e90798,
  0x673b1e24, 0x76dd6e78, 0x7cc02fd2, 0x43de4401,
  0x4f184062, 0x493b571e, 0x60711e25, 0x78818bf0,
  0x73dd614c, 0x7fc65684, 0x426a6c59, 0x4f7bb09f,
  0x682d1cb9, 0x44431e7d, 0x4d56fb3c, 0x64d2c5e8,
  0x725930d4, 0x526cdfac, 0x6657a06e, 0x46bfdca5,
  0x731e0861, 0x4bbeef9d, 0x4a48a38e, 0x4c4b6e64,
  0x42aaad16, 0x517036a4, 0x5a6d2017, 0x6f1abada,
  0x5db7b074, 0x48fe7f70, 0x4b6aca8d, 0x50a76127,
  0x4209ceb5, 0x791d267b, 0x76b4a2a0, 0x5f3a5997,
  0x602091df, 0x422f5ff5, 0x4c8b9d6d, 0x410172a9,
  0x45728f53, 0x6ed8d6a7, 0x53770846, 0x5b3add6f,
  0x7f3bc61c, 0x797c83ea, 0x64fbca04, 0x605cea2a,
  0x6f9c8a20, 0x6c9cb353, 0x573c647a, 0x73885202,
  0x7faeeac9, 0x5339243a, 0x50c42687, 0x6a5367aa,
  0x52e7c38a, 0x66ca007f, 0x6b85ab18, 0x4fcd6b15,
  0x781e92de, 0x575c0b4f, 0x6aee28bb, 0x766ba622,
  0x63636aa1, 0x6ad750f0, 0x5e5428e5, 0x49d49ec4,
  0x710b3ab6, 0x7bc31134, 0x74c7524b, 0x4496bd36,
  0x68ea16bc, 0x5590502f, 0x434b7bfa, 0x558225eb,
};
constexpr size_t size_52 = 256;

const uint32_t buffer_53[256] = {
  0xfffffff7, 0xfffffff7, 0xfffffff7, 0xfffffff6,
  0xfffffff7, 0xfffffff6, 0xfffffff6, 0xfffffff7,
  0xfffffff7, 0xfffffff7, 0xfffffff7, 0xfffffff6,
  0xfffffff7, 0xfffffff6, 0xfffffff6, 0xfffffff7,
  0xfffffff7, 0xfffffff6, 0xfffffff6, 0xfffffff7,
  0xfffffff6, 0xfffffff6, 0xfffffff7, 0xfffffff6,
  0xfffffff7, 0xfffffff6, 0xfffffff7, 0xfffffff7,
  0xfffffff6, 0xfffffff6, 0xfffffff7, 0xfffffff7,
  0xfffffff7, 0xfffffff7, 0xfffffff6, 0xfffffff6,
  0xfffffff7, 0xfffffff6, 0xfffffff7, 0xfffffff6,
  0xfffffff7, 0xfffffff7, 0xfffffff7, 0xfffffff7,
  0xfffffff6, 0xfffffff6, 0xfffffff6, 0xfffffff6,
  0xfffffff7, 0xfffffff7, 0xfffffff7, 0xfffffff6,
  0xfffffff6, 0xfffffff8, 0xfffffff6, 0xfffffff7,
  0xfffffff7, 0xfffffff6, 0xfffffff6, 0xfffffff7,
  0xfffffff7, 0xfffffff7, 0xfffffff7, 0xfffffff6,
  0xfffffff6, 0xfffffff7, 0xfffffff6, 0xfffffff6,
  0xfffffff6, 0xfffffff7, 0xfffffff7, 0xfffffff6,
  0xfffffff6, 0xfffffff7, 0xfffffff6, 0xfffffff6,
  0xfffffff7, 0xfffffff7, 0xfffffff6, 0xfffffff6,
  0xfffffff8, 0xfffffff6, 0xfffffff6, 0xfffffff6,
  0xfffffff7, 0xfffffff6, 0xfffffff6, 0xfffffff7,
  0xfffffff6, 0xfffffff7, 0xfffffff7, 0xfffffff6,
  0xfffffff7, 0xfffffff7, 0xfffffff6, 0xfffffff7,
  0xfffffff7, 0xfffffff7, 0xfffffff7, 0xfffffff6,
  0xfffffff6, 0xfffffff6, 0xfffffff6, 0xfffffff7,
  0xfffffff7, 0xfffffff6, 0xfffffff6, 0xfffffff6,
  0xfffffff7, 0xfffffff7, 0xfffffff7, 0xfffffff6,
  0xfffffff6, 0xfffffff7, 0xfffffff6, 0xfffffff7,
  0xfffffff7, 0xfffffff6, 0xfffffff7, 0xfffffff6,
  0xfffffff7, 0xfffffff6, 0xfffffff6, 0xfffffff7,
  0xfffffff7, 0xfffffff6, 0xfffffff6, 0xfffffff7,
  0xfffffff7, 0xfffffff7, 0xfffffff7, 0xfffffff7,
  0xfffffff7, 0xfffffff6, 0xfffffff7, 0xfffffff6,
  0xfffffff7, 0xfffffff7, 0xfffffff6, 0xfffffff6,
  0xfffffff7, 0xfffffff6, 0xfffffff6, 0xfffffff7,
  0xfffffff7, 0xfffffff7, 0xfffffff7, 0xfffffff7,
  0xfffffff7, 0xfffffff6, 0xfffffff7, 0xfffffff6,
  0xfffffff6, 0xfffffff6, 0xfffffff7, 0xfffffff7,
  0xfffffff6, 0xfffffff7, 0xfffffff6, 0xfffffff6,
  0xfffffff6, 0xfffffff6, 0xfffffff7, 0xfffffff7,
  0xfffffff6, 0xfffffff6, 0xfffffff6, 0xfffffff6,
  0xfffffff6, 0xfffffff7, 0xfffffff7, 0xfffffff6,
  0xfffffff7, 0xfffffff6, 0xfffffff6, 0xfffffff6,
  0xfffffff8, 0xfffffff8, 0xfffffff7, 0xfffffff7,
  0xfffffff6, 0xfffffff6, 0xfffffff6, 0xfffffff7,
  0xfffffff7, 0xfffffff7, 0xfffffff7, 0xfffffff6,
  0xfffffff6, 0xfffffff6, 0xfffffff7, 0xfffffff7,
  0xfffffff6, 0xfffffff7, 0xfffffff7, 0xfffffff6,
  0xfffffff6, 0xfffffff7, 0xfffffff6, 0xfffffff6,
  0xfffffff6, 0xfffffff6, 0xfffffff7, 0xfffffff7,
  0xfffffff7, 0xfffffff7, 0xfffffff7, 0xfffffff6,
  0xfffffff6, 0xfffffff7, 0xfffffff7, 0xfffffff7,
  0xfffffff7, 0xfffffff6, 0xfffffff7, 0xfffffff6,
  0xfffffff6, 0xfffffff7, 0xfffffff7, 0xfffffff7,
  0xfffffff7, 0xfffffff6, 0xfffffff7, 0xfffffff7,
  0xfffffff6, 0xfffffff6, 0xfffffff6, 0xfffffff6,
  0xfffffff6, 0xfffffff6, 0xfffffff7, 0xfffffff6,
  0xfffffff6, 0xfffffff6, 0xfffffff7, 0xfffffff7,
  0xfffffff7, 0xfffffff6, 0xfffffff6, 0xfffffff7,
  0xfffffff7, 0xfffffff7, 0xfffffff6, 0xfffffff7,
  0xfffffff6, 0xfffffff7, 0xfffffff7, 0xfffffff7,
  0xfffffff6, 0xfffffff7, 0xfffffff6, 0xfffffff7,
  0xfffffff7, 0xfffffff7, 0xfffffff7, 0xfffffff7,
};
constexpr size_t size_53 = 256;

const uint32_t buffer_54[2] = {
  0x474b09cc, 0x43f2946c,
};
constexpr size_t size_54 = 2;

const uint32_t buffer_55[2] = {
  0xfffffff8, 0xfffffff8,
};
constexpr size_t size_55 = 2;

const int32_t* buffers[] = {
  reinterpret_cast<const int32_t *>(buffer_0),
  reinterpret_cast<const int32_t *>(buffer_1),
  reinterpret_cast<const int32_t *>(buffer_2),
  reinterpret_cast<const int32_t *>(buffer_3),
  reinterpret_cast<const int32_t *>(buffer_4),
  reinterpret_cast<const int32_t *>(buffer_5),
  reinterpret_cast<const int32_t *>(buffer_6),
  reinterpret_cast<const int32_t *>(buffer_7),
  reinterpret_cast<const int32_t *>(buffer_8),
  reinterpret_cast<const int32_t *>(buffer_9),
  reinterpret_cast<const int32_t *>(buffer_10),
  reinterpret_cast<const int32_t *>(buffer_11),
  reinterpret_cast<const int32_t *>(buffer_12),
  reinterpret_cast<const int32_t *>(buffer_13),
  reinterpret_cast<const int32_t *>(buffer_14),
  reinterpret_cast<const int32_t *>(buffer_15),
  reinterpret_cast<const int32_t *>(buffer_16),
  reinterpret_cast<const int32_t *>(buffer_17),
  reinterpret_cast<const int32_t *>(buffer_18),
  reinterpret_cast<const int32_t *>(buffer_19),
  reinterpret_cast<const int32_t *>(buffer_20),
  reinterpret_cast<const int32_t *>(buffer_21),
  reinterpret_cast<const int32_t *>(buffer_22),
  reinterpret_cast<const int32_t *>(buffer_23),
  reinterpret_cast<const int32_t *>(buffer_24),
  reinterpret_cast<const int32_t *>(buffer_25),
  reinterpret_cast<const int32_t *>(buffer_26),
  reinterpret_cast<const int32_t *>(buffer_27),
  reinterpret_cast<const int32_t *>(buffer_28),
  reinterpret_cast<const int32_t *>(buffer_29),
  reinterpret_cast<const int32_t *>(buffer_30),
  reinterpret_cast<const int32_t *>(buffer_31),
  reinterpret_cast<const int32_t *>(buffer_32),
  reinterpret_cast<const int32_t *>(buffer_33),
  reinterpret_cast<const int32_t *>(buffer_34),
  reinterpret_cast<const int32_t *>(buffer_35),
  reinterpret_cast<const int32_t *>(buffer_36),
  reinterpret_cast<const int32_t *>(buffer_37),
  reinterpret_cast<const int32_t *>(buffer_38),
  reinterpret_cast<const int32_t *>(buffer_39),
  reinterpret_cast<const int32_t *>(buffer_40),
  reinterpret_cast<const int32_t *>(buffer_41),
  reinterpret_cast<const int32_t *>(buffer_42),
  reinterpret_cast<const int32_t *>(buffer_43),
  reinterpret_cast<const int32_t *>(buffer_44),
  reinterpret_cast<const int32_t *>(buffer_45),
  reinterpret_cast<const int32_t *>(buffer_46),
  reinterpret_cast<const int32_t *>(buffer_47),
  reinterpret_cast<const int32_t *>(buffer_48),
  reinterpret_cast<const int32_t *>(buffer_49),
  reinterpret_cast<const int32_t *>(buffer_50),
  reinterpret_cast<const int32_t *>(buffer_51),
  reinterpret_cast<const int32_t *>(buffer_52),
  reinterpret_cast<const int32_t *>(buffer_53),
  reinterpret_cast<const int32_t *>(buffer_54),
  reinterpret_cast<const int32_t *>(buffer_55),
};
const size_t sizes[] = {
  size_0,
  size_1,
  size_2,
  size_3,
  size_4,
  size_5,
  size_6,
  size_7,
  size_8,
  size_9,
  size_10,
  size_11,
  size_12,
  size_13,
  size_14,
  size_15,
  size_16,
  size_17,
  size_18,
  size_19,
  size_20,
  size_21,
  size_22,
  size_23,
  size_24,
  size_25,
  size_26,
  size_27,
  size_28,
  size_29,
  size_30,
  size_31,
  size_32,
  size_33,
  size_34,
  size_35,
  size_36,
  size_37,
  size_38,
  size_39,
  size_40,
  size_41,
  size_42,
  size_43,
  size_44,
  size_45,
  size_46,
  size_47,
  size_48,
  size_49,
  size_50,
  size_51,
  size_52,
  size_53,
  size_54,
  size_55,
};
} // anonymous namespace

calculate_once::Cache *GetCachePdti8() {
  static calculate_once::Cache cache(model_hash, 56, buffers, sizes);
  return &cache;
};
